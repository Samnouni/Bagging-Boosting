# Importation de la table
d <- read.table("/home/samnouni/Bureau/M2 ISN/methode daprentissage/bagging boosting/1625Data.txt",sep=",",header=T)
head(d)
d$Octamer <- as.character(d$Octamer)
# on sépare les mots de 8 lettres en 8 variables
variables <- t(sapply(1:nrow(d),FUN=function(i){unlist(strsplit(d[i,1],""))}))
d <- cbind(Clived=d$Clived,variables)
d <- as.data.frame(d)
d$Clived <- as.factor(as.numeric(d$Clived)-1)
summary(d)
# Fixe la graine pour obtenir les mêmes résultats à chaque tirage
set.seed(1234)
# Echantillon apprentissage et test
library(caret)
indtrain <- createDataPartition(d$Clived,p=0.8,list=F)
dtrain <- d[indtrain,]
dtest <- d[-indtrain,]
# Proportion d'octamères clivés dans les deux bases
prop.table(table(dtrain$Clived))
prop.table(table(dtest$Clived))
# Fonction qui calcule le taux d'erreur
tx_er <- function(pred,vrais){
mc <- table(pred,vrais)
1 - sum(diag(mc))/sum(mc)
}
### Classifieur constant ou classifieur faible
nbClived <- table(dtrain$Clived)[2]
mcst <- mean(dtest$Clived!=0)
mcst
############################################################################
### CART
# Arbre max
library(rpart)
library(rpart.plot)
mcartmax <- rpart(as.factor(Clived)~.,data=dtrain,cp=0,minbucket=1,maxdepth=30)
predcartmax <- predict(mcartmax,newdata=dtest,type="class")
te_cartmax <- tx_er(predcartmax,dtest$Clived)
head(predcartmax)
predcartmax
head(predcartmax)
head(dtest$Clived)
te_cartmax
# Fonction qui calcule le taux d'erreur
tx_er <- function(pred,vrais){
#mc <-
table(pred,vrais)
#1 - sum(diag(mc))/sum(mc)
}
te_cartmax <- tx_er(predcartmax,dtest$Clived)
te_cartmax
rep(0,4)
nrow(d)
